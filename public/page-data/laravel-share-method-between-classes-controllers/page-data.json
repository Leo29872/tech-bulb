{"componentChunkName":"component---src-templates-blog-post-js","path":"/laravel-share-method-between-classes-controllers","result":{"data":{"markdownRemark":{"html":"<div class=\"blog-post__container\">\n<p>As you should know PHP is a language where one class can inherit from one other class(single inheritance). When you build your apps/projects you want to make that clean and easy to extend. You want to avoid copying code fragments between different elements. If you want to share a code fragment between different places in you app, there is an easy way to accomplish that – PHP Traits.</p>\n<p>Let me introduce the example of Trait. I want to store all caught errors in my database. We’ll store user_id which meet the error, request name and message of error. We want to add that in all controllers methods in the catch block.</p>\n<p>First we need model for ErrorLog.</p>\n<p><span class=\"blog-post__file--name\"><i>app/ErrorLog.php</i></span></p>\n<pre>\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass ErrorLog extends Model\n{\n    protected $table = 'error_logs';\n    protected $fillable = ['user_id', 'request', 'message'];\n}\n</pre>\n<p>We will store user_id, request and message in table called error_logs. </p>\n<p>Our migration will be looks like:</p>\n<pre>\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateErrorLogsTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('error_logs', function (Blueprint $table) {\n            $table->increments('id');\n            $table->integer('user_id')->default(0);\n            $table->string('request')->default('');\n            $table->text('message');\n            $table->timestamps();\n        });\n    }\n    public function down()\n    {\n        Schema::dropIfExists('error_logs');\n    }\n}\n</pre>\n<p>Now we can create shared Trait inside app/Http/Traits called ErrorLogTrait.php</p>\n<p>It contains one method storeErrorLog which gets user_id, requestName and message parameters and save error to database. </p>\n<p><span class=\"blog-post__file--name\"><i>app/Http/Traits/ErrorLogTrait.php</i></span></p>\n<pre>\nnamespace App\\Http\\Traits;\nuse App\\ErrorLog;\ntrait ErrorLogTrait {\npublic function storeErrorLog($user_id, $requestName, $message) {\n       $user_id = $user_id;\n       $requestName = $requestName;\n       $message = $message;\n        try{\n            $errorLog = new ErrorLog();\n            $errorLog->user_id = $user_id;\n            $errorLog->request = $requestName;\n            $errorLog->message = $message;\n            $errorLog->save();\n            return $errorLog;\n        }catch(\\Exception $e){\n            return response()->json(['status' => 'ERR', 'result' => 'Oops something goes wrong.']);\n        }\n    }\n}\n</pre>\n<p>Now when you created your Trait you can call it, as in the following example below.</p>\n<pre>\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\User;\nuse App\\Http\\Traits\\ErrorLogTrait;\nclass UserController extends Controller\n{\n    use ErrorLogTrait;\n\n    protected function create(array $data)\n    {\n        try{\n            $user = User::create([\n                'name' => $data['name'],\n                'email' => $data['email'],\n                'password' => Hash::make($data['password']),\n                'platform' => $data['platform'],\n                'age' => 0,\n                'lattitude' => 0,\n                'longitude' => 0,\n                'description' => '',\n                'email_token' => base64_encode(\\$data['email'])\n            ]);\n\n           $success['token'] =  $user->createToken('myapp')->accessToken;\n           $success['name'] =  $user->name;\n\n           return response()->json(['user' => $user, 'status' => 'OK']);\n        }catch(\\Exception $e){\n           $this->storeErrorLog($user->id, '/register', $e->getMessage());\n\n           return response()->json(['status' => 'ERR', 'result' => 'Can’t save user data.']);\n        }\n    }\n}\n</pre>\n<p>When we include use ErrorLogTrait; we can call particular methods from that Trait using $this->method()</p>\n<p>As you can see Traits are a great opportunity to share the same functionalities in multiple places. </p>\n<p>Keep in mind that Traits like abstract classes can’t be instantiate of its own. </p>\n</div>","frontmatter":{"path":"/laravel-share-method-between-classes-controllers","title":"Laravel – share method between controllers","author":"Szymon Radosz","date":"2019-07-28"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}